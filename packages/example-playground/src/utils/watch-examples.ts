import { watch, writeFile as w, readdir as r, readFile as rf } from 'fs';
import { promisify } from 'util';
import { normalize } from 'path';
const writeFile = promisify(w);
const readdir = promisify(r);
const readFile = promisify(rf);

const examples = 'src/examples';
const updateIndex = async (_event?: string, filePath?: string) => {
    if (filePath === 'index.ts') {
        return;
    }
    const dirs = (await readdir(examples, { withFileTypes: true })).
        filter(dir => dir.isDirectory()).
        map(i => i.name);
    const sources = dirs.map(d => readFile(normalize(`${examples}/${d}/source.tsx`), { encoding: 'utf8' }));
    const compiled = dirs.map(d => readFile(normalize(`${examples}/${d}/compiled.ts`), { encoding: 'utf8' }));

    const imports = dirs.
        map((example, index) => `import { runExample as run${index} } from './${example}/compiled';`);
    const exports = dirs.map(async (dir, index) =>
        `{
    name:'${dir}', 
    run: run${index},
    source: ${JSON.stringify(await sources[index])},
    compiled: ${JSON.stringify(await compiled[index])}
}`);
    await writeFile(normalize(`${examples}/index.ts`),
        `// Generated by example-playground/src/utils/watch-examples.ts

${imports.join('\n')}

export default [${(await Promise.all(exports)).join(',\n\t')}] as Example[];

export interface Example {
    run: (target:HTMLElement) => () => void;
    name: string;
    source: string;
    compiled: string;
}
`

    );
};

updateIndex().then(() => {
    // watch(examples, { recursive: false, persistent: true }, updateIndex);
});
